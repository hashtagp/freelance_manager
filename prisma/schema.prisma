// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects       Project[]
  teamMemberships ProjectTeamMember[]
  teamMembershipsAsTeamMember TeamMember[]
  paymentsReceived Payment[] @relation("PaymentToUser")
  paymentsMade     Payment[] @relation("PaymentFromUser")
  projectPricing   ProjectTeamMemberPricing[] @relation("UserProjectPricing")
  createdPayouts   Payout[] @relation("PayoutCreator")
  createdPayins    Payin[]  @relation("PayinCreator")
  payoutMemberships PayoutMember[]

  @@map("users")
}

model Client {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  company     String?
  address     String?
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projects Project[]

  @@map("clients")
}

model Project {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      ProjectStatus @default(PLANNING)
  budget      Float?
  startDate   DateTime?
  deadline    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Foreign Keys
  userId   String
  clientId String?

  // Relations
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  client       Client?             @relation(fields: [clientId], references: [id], onDelete: SetNull)
  teamMembers  ProjectTeamMember[]
  teams        ProjectTeam[]
  memberPricing ProjectTeamMemberPricing[]
  payments     Payment[]
  deadlines    Deadline[]
  payouts      Payout[]
  payins       Payin[]

  @@map("projects")
}

model ProjectTeamMember {
  id        String   @id @default(cuid())
  role      String
  hourlyRate Float?
  totalAllocation Float? // Total amount allocated for this project
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  projectId String
  userId    String

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_team_members")
}

model Payment {
  id          String      @id @default(cuid())
  amount      Float
  description String?
  type        PaymentType
  status      PaymentStatus @default(PENDING)
  dueDate     DateTime?
  paidDate    DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Foreign Keys
  projectId String
  fromUserId String? // Who made the payment (client payments have null)
  toUserId   String? // Who received the payment (client payments to project owner)

  // Relations
  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  fromUser User?   @relation("PaymentFromUser", fields: [fromUserId], references: [id], onDelete: SetNull)
  toUser   User?   @relation("PaymentToUser", fields: [toUserId], references: [id], onDelete: SetNull)

  @@map("payments")
}

model Deadline {
  id          String         @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  status      DeadlineStatus @default(PENDING)
  priority    Priority       @default(MEDIUM)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Foreign Keys
  projectId String

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("deadlines")
}

model Team {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  members  TeamMember[]
  projects ProjectTeam[]
  memberPricing ProjectTeamMemberPricing[]

  @@map("teams")
}

model TeamMember {
  id        String   @id @default(cuid())
  role      String   @default("Member")
  joinedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  teamId String
  userId String

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model ProjectTeam {
  id        String   @id @default(cuid())
  assignedAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  projectId String
  teamId    String

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  memberPricing ProjectTeamMemberPricing[]

  @@unique([projectId, teamId])
  @@map("project_teams")
}

model ProjectTeamMemberPricing {
  id        String   @id @default(cuid())
  fixedRate Float    // Fixed rate for this member on this project
  currency  String   @default("USD")
  notes     String?  // Optional notes about the pricing
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  projectId String
  teamId    String
  userId    String

  // Relations
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team        Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user        User        @relation("UserProjectPricing", fields: [userId], references: [id], onDelete: Cascade)
  projectTeam ProjectTeam @relation(fields: [projectId, teamId], references: [projectId, teamId], onDelete: Cascade)

  @@unique([projectId, teamId, userId])
  @@map("project_team_member_pricing")
}

// Enums
enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum PaymentType {
  CLIENT_TO_PROJECT  // Payment from client to project
  PROJECT_TO_MEMBER  // Payment from project to team member
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum DeadlineStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Payout {
  id          String       @id @default(cuid())
  title       String
  description String?
  totalAmount Float
  payoutDate  DateTime     @default(now())
  status      PayoutStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Foreign Keys
  projectId String
  createdBy String

  // Relations
  project Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator User           @relation("PayoutCreator", fields: [createdBy], references: [id])
  members PayoutMember[]

  @@map("payouts")
}

model PayoutMember {
  id        String   @id @default(cuid())
  amount    Float
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  payoutId String
  userId   String

  // Relations
  payout Payout @relation(fields: [payoutId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([payoutId, userId])
  @@map("payout_members")
}

model Payin {
  id          String      @id @default(cuid())
  title       String
  description String?
  amount      Float
  payinDate   DateTime    @default(now())
  status      PayinStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Foreign Keys
  projectId String
  createdBy String
  
  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator User    @relation("PayinCreator", fields: [createdBy], references: [id])
  
  @@map("payins")
}

enum PayoutStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PayinStatus {
  PENDING
  RECEIVED
  CANCELLED
}